/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dandm_marpg_client;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.HashSet;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.Timer;

/**
 *
 * @author Dajne Win
 */
public class MainJFrame extends javax.swing.JFrame implements ActionListener, KeyListener, MouseListener {

    DrawPanel drawPanel;
    public Player player;
    public HashSet<Entity> entities;
    public HashSet<String> chatLog;
    ScheduledExecutorService threadPool;
    private int timeoutMilliseconds = 500;
    private long timeStamp;
    
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        entities = new HashSet<>();
        chatLog = new HashSet<>();
        threadPool = Executors.newScheduledThreadPool(5);
        drawPanel = new DrawPanel(this);
        ActionListener listener = new DrawPanel(this);
        Timer t = new Timer(10, listener);
        t.start();
        this.setExtendedState(this.getExtendedState()|java.awt.Frame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        registerButton = new javax.swing.JButton();
        resultLabel = new javax.swing.JLabel();
        jTxtServerIp = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtChatBox = new javax.swing.JTextArea();
        txtMessage = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Username:");

        jLabel2.setText("Password:");

        passwordTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordTextFieldKeyPressed(evt);
            }
        });

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        resultLabel.setText("Result");

        jTxtServerIp.setText("127.0.0.1");
        jTxtServerIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtServerIpActionPerformed(evt);
            }
        });

        jLabel3.setText("Server IP");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtChatBox.setEditable(false);
        txtChatBox.setColumns(20);
        txtChatBox.setRows(5);
        txtChatBox.setEnabled(false);
        jScrollPane1.setViewportView(txtChatBox);

        txtMessage.setEnabled(false);
        txtMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMessageKeyPressed(evt);
            }
        });

        btnSend.setText("Send");
        btnSend.setEnabled(false);
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtMessage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSend)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSend))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(resultLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTxtServerIp, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 192, Short.MAX_VALUE)
                        .addComponent(registerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loginButton)))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTxtServerIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(resultLabel)
                            .addComponent(loginButton)
                            .addComponent(registerButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed

        String user = usernameTextField.getText();
        String pass = new String(passwordTextField.getPassword());
        NetworkCommunicationThread netThread = new NetworkCommunicationThread("login " + user + " " + pass, this);
        Thread thread = new Thread(netThread);
        thread.start();
        while(thread.isAlive())
        {
            Thread.yield();
        }
        resultLabel.setText(netThread.resultFromServer);
        drawPanel.repaint();
        NetworkCommunicationThread chatThread = new NetworkCommunicationThread("chat" + player.getName() + "::", this);
        Thread cThread = new Thread(chatThread);
        cThread.start();
        // TODO add your handling code here:
    }//GEN-LAST:event_loginButtonActionPerformed

    class DrawPanel extends JFrame implements ActionListener {
        
        private MainJFrame mainJFrame;
        
        public DrawPanel(MainJFrame jFrame)
        {
            mainJFrame = jFrame;
        }

        @Override
        public void actionPerformed(ActionEvent event) {
            HashSet<Entity> thingsToRemove = new HashSet<>();
            for (Entity e : entities) {
                if (e instanceof Player) {
                    Player playerz = (Player) e;
                    if (playerz.addedButton == false) {
                        mainJFrame.add(playerz.button);
                        playerz.addedButton = true;
                        mainJFrame.drawButtons(playerz, true);
                    }
                    else
                    {
                        mainJFrame.drawButtons(playerz, true);
                    }
                }
                if (e instanceof Bullet) {
                    Bullet bullet = (Bullet) e;
                    if (bullet.finishedMoving) {
                        bullet.button.setVisible(false);
                        thingsToRemove.add(e);
                    }
                    if (bullet.addedButton == false) {
                        mainJFrame.add(bullet.button);
                        bullet.button.setVisible(true);
                        bullet.addedButton = true;
                    }
                    bullet.move();
                    bullet.button.revalidate();
                    bullet.button.repaint();
                }
            }
            for (Entity e : thingsToRemove) {
                entities.remove(e);
            }
            for(String s : chatLog)
            {
                txtChatBox.append(s + "\n");
            }
            chatLog.clear();
        }
    }
    
    public synchronized void drawButtons(Entity e, boolean visible)
    {
        if (e instanceof Player) {
            Player playerz = (Player) e;
            playerz.button.setBounds(playerz.getXCoOrd(), playerz.getYCoOrd(), 50, 50);
            if(!playerz.button.isVisible())
            {
                playerz.button.setVisible(visible);
            }
            playerz.button.revalidate();
            playerz.button.repaint();
        }
        
    }
    
    public void setupLoginForm(boolean bool)
    {
        boolean notBool;
        if (bool == true) {
            notBool = false;
        } else {
            notBool = true;
        }
        
        usernameTextField.setVisible(bool);
        passwordTextField.setVisible(bool);
        loginButton.setVisible(bool);
        registerButton.setVisible(bool);
        resultLabel.setVisible(bool);
        jLabel1.setVisible(bool);
        jLabel2.setVisible(bool);
        jTxtServerIp.setVisible(bool);
        jLabel3.setVisible(bool);
        txtChatBox.setEnabled(bool);
        txtMessage.setEnabled(notBool);
        btnSend.setEnabled(notBool);
        
        
    }
    
    public void setupPlayerForm(boolean bool)
    {
        if (bool)
        {
            addMouseListener(this);
            timeStamp = System.currentTimeMillis();
            threadPool.scheduleAtFixedRate(new NetworkCommunicationThread("ping " + player.getName(), this), 0, 20, TimeUnit.SECONDS);
            threadPool.scheduleAtFixedRate(new NetworkCommunicationThread("movingentities " + player.getName(), this), 0, 30, TimeUnit.MILLISECONDS);
            player.button.addKeyListener(this);
        }
        else
        {
            player.button.setVisible(false);
            player.button = null;
        }
    }
    
    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed

        String user = usernameTextField.getText();
        String pass = new String(passwordTextField.getPassword());
        NetworkCommunicationThread netThread = new NetworkCommunicationThread("register " + user + " " + pass, this);
        Thread thread = new Thread(netThread);
        thread.start();
        while(thread.isAlive())
        {
            Thread.yield();
        }
        resultLabel.setText(netThread.resultFromServer);
         drawPanel.repaint();
        // TODO add your handling code here:
    }//GEN-LAST:event_registerButtonActionPerformed

    private void jTxtServerIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtServerIpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtServerIpActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
        String chatMessage = txtMessage.getText();
        txtMessage.setText("");
        NetworkCommunicationThread chatThread = new NetworkCommunicationThread("chat" + player.getName() + "::" + chatMessage, this);
        Thread cThread = new Thread(chatThread);
        cThread.start();
        /*NetworkCommunicationThread netThread = new NetworkCommunicationThread("chat//" + player.getName() + "//" + chatMessage, this);
        Thread thread = new Thread(netThread);
        thread.start();
        while(thread.isAlive())
        {
            Thread.yield();
        }*/
         drawPanel.repaint();
    }//GEN-LAST:event_btnSendActionPerformed

    
    private void txtMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMessageKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnSendActionPerformed(null);
        }
         drawPanel.repaint();
    }//GEN-LAST:event_txtMessageKeyPressed

    private void passwordTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordTextFieldKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            loginButtonActionPerformed(null);
        }
         drawPanel.repaint();
    }//GEN-LAST:event_passwordTextFieldKeyPressed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });   
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTextField jTxtServerIp;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JButton registerButton;
    private javax.swing.JLabel resultLabel;
    public javax.swing.JTextArea txtChatBox;
    private javax.swing.JTextField txtMessage;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        /*if (e.getSource() == moveRightButton)
        {
            if ((x + 100) <= this.getSize().width)
            {
                x += 50;
                playerButton.setBounds(x, y, 50, 50);
            }
        }*/
    }

    @Override
    public void keyTyped(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyPressed(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if (e.getKeyCode() == KeyEvent.VK_UP) {
            if ((player.getYCoOrd() - 50) >= 0)
            {
                int set = player.getYCoOrd() - 50;
                player.setYCoOrd(set);
                NetworkCommunicationThread netThread = new NetworkCommunicationThread("move " + player.getName() + " " + player.getXCoOrd() + " " + player.getYCoOrd(), this);
                Thread thread = new Thread(netThread);
                thread.start();
                if (!player.isPlayerLoggedIn())
                {
                    setupLoginForm(true);
                }
            }            
        }
        else if (e.getKeyCode() == KeyEvent.VK_DOWN) {
            if ((player.getYCoOrd() + 100) <= this.getSize().height)
            {
                int set = player.getYCoOrd() + 50;
                player.setYCoOrd(set);
                NetworkCommunicationThread netThread = new NetworkCommunicationThread("move " + player.getName() + " " + player.getXCoOrd() + " " + player.getYCoOrd(), this);
                Thread thread = new Thread(netThread);
                thread.start();
                if (!player.isPlayerLoggedIn())
                {
                    setupLoginForm(true);
                }
            }            
        }
        else if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            if ((player.getXCoOrd() - 50) >= 0)
            {
                int set = player.getXCoOrd() - 50;
                player.setXCoOrd(set);
                NetworkCommunicationThread netThread = new NetworkCommunicationThread("move " + player.getName() + " " + player.getXCoOrd() + " " + player.getYCoOrd(), this);
                Thread thread = new Thread(netThread);
                thread.start();
                if (!player.isPlayerLoggedIn())
                {
                    setupLoginForm(true);
                }
            }            
        }
        else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            if ((player.getXCoOrd() + 100) <= this.getSize().width)
            {
                int set = player.getXCoOrd() + 50;
                player.setXCoOrd(set);
                NetworkCommunicationThread netThread = new NetworkCommunicationThread("move " + player.getName() + " " + player.getXCoOrd() + " " + player.getYCoOrd(), this);
                Thread thread = new Thread(netThread);
                thread.start();
                if (!player.isPlayerLoggedIn())
                {
                    setupLoginForm(true);
                }
            }            
        }
         drawPanel.repaint();
    }

    @Override
    public void keyReleased(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        
    }

    @Override
    public void mousePressed(MouseEvent e) {
        if(entities.size() > 0 && (System.currentTimeMillis() > (timeStamp + timeoutMilliseconds)))
        {
            timeStamp = System.currentTimeMillis();
            Bullet bullet = new Bullet("bullet", new JButton("."),player,player.getXCoOrd(),player.getYCoOrd(),e.getX(),e.getY());
            entities.add(bullet);
        }
         drawPanel.repaint();
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
        
    }
}
